services:

  nginx:
    image: registry.info66.ru:5000/tasks_board:proxy
    container_name: tasks_proxy
    restart: always
    ports:
      - 80:80
      - 4443:443
    networks:
      - my-network
    depends_on:
      - task_app
#        condition: service_healthy
    env_file: .env

  task_app:
    build:
      context: ./django
      dockerfile: Dockerfile_dev
    image: django:${TAG}
    container_name: task_app
    volumes:
      - ./django/mysite:/home/app
      - ./django/celery/proj:/home/app/proj
    environment:
      - THREADS=without
    expose:
      - 8000
    ports:
      - 8000:8000
    depends_on:
      task_db:
        condition: service_healthy
    command: /bin/bash -c "python manage.py makemigrations; python manage.py makemigrations tasks; python manage.py migrate; python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: curl --fail -s http://127.0.0.1:8000/ || exit 1
      interval: 20s
      timeout: 10s
      retries: 3
    networks:
      - my-network
    env_file: .env

  task_db:
    image: postgres:13.7-alpine
    container_name: task_db
    restart: always
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - tasks_postgres_volume:/var/lib/postgresql/data
      - ./postgres/postgres_config/set_schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d tasks" ]
      start_period: 10s
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  celery-redis:
    hostname: celery-redis
    container_name: celery-redis
    env_file:
      - .env
    environment:
      REDIS_HOST: $CELERY_REDIS_HOST
      REDIS_PORT: $CELERY_REDIS_PORT
#      REDIS_PASSWORD: $CELERY_REDIS_PASSWORD
    image: redis:7.0.5
#    depends_on:
#      rabbitmq-manager:
#        condition: service_healthy
    healthcheck:
      test: redis-cli -a $CELERY_REDIS_PASSWORD ping || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    ports:
      - 6379:6379
    networks:
      - my-network

  celery_worker:
    build:
      context: ./django/celery
      dockerfile: Dockerfile_dev
    image: celery_worker:${TAG}
    container_name: celery_worker
    volumes:
      - ./django/celery/:/home/app
    depends_on:
      celery-redis:
        condition: service_started
#      task_app:
#        condition: service_healthy
    command: /bin/bash -c "/home/app/worker.sh"
#    healthcheck:
#      test: curl --fail -s http://task-app:8000/ || exit 1
#      interval: 20s
#      timeout: 10s
#      retries: 3
    networks:
      - my-network
    env_file: .env

volumes:
  tasks_postgres_volume:


networks:
    my-network: