services:

  nginx:
    image: sagrityanin4/tasks_board_proxy:1.0
    container_name: tasks_proxy
    restart: always
    ports:
      - 10.5.0.33:8000:80
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/static:/home/static:ro
      - /etc/letsencrypt/live/task.info66.ru:/ssl1:ro
      - ./nginx/ssl:/ssl:ro
      - ./nginx/certbot:/app
    networks:
      - my-network
    depends_on:
      - task-app
#        condition: service_healthy
    env_file: .env

  task-app:
    image: sagrityanin4/tasks_board_app:1.3
    container_name: task_app
    environment:
      - THREADS=without
    expose:
      - 8000
    depends_on:
      task_db:
        condition: service_healthy
    labels:
      - "autoheal=true"
    healthcheck:
      test: curl --fail -s http://127.0.0.1:8000/ || exit 1
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - my-network
    env_file: .env

  task_db:
    image: postgres:13.7-alpine
    container_name: task_db
    restart: always
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/postgres_config/set_schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    labels:
      - "autoheal=true"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d tasks" ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  celery-redis:
    hostname: celery-redis
    container_name: celery-redis
    env_file:
      - .env
    environment:
      REDIS_HOST: $CELERY_REDIS_HOST
      REDIS_PORT: $CELERY_REDIS_PORT
#      REDIS_PASSWORD: $CELERY_REDIS_PASSWORD
    image: redis:7.0.11-alpine3.18
    labels:
      - "autoheal=true"
    healthcheck:
      test: redis-cli -a $CELERY_REDIS_PASSWORD ping || exit 1
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 5s
    networks:
      - my-network

  celery_worker:
    image: sagrityanin4/tasks_board_worker:1.3
    container_name: celery_worker
    depends_on:
      celery-redis:
        condition: service_started
      task-app:
        condition: service_started
    labels:
      - "autoheal=true"
    healthcheck:
      test: curl -s http://task-app:8000/ || exit 1
      interval: 20s
      timeout: 10s
      retries: 3
    networks:
      - my-network
    env_file: .env

  autoheal:
    image: willfarrell/autoheal
    container_name: binance-autoheal
    restart: always
    environment:
      AUTOHEAL_CONTAINER_LABEL: "autoheal"
      AUTOHEAL_INTERVAL: "5"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  tasks_postgres_volume:


networks:
    my-network: