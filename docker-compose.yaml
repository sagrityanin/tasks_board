services:

  nginx:
    image: nginx:1.22.0
    container_name: nginx
    restart: always
    ports:
      - 8080:80
      - 4443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/static:/home/static:ro
      - ./nginx/ssl:/ssl:ro
    networks:
      - my-network
    depends_on:
      - task_app
#        condition: service_healthy
    env_file: .env

  task_app:
    build:
      context: ./django
      dockerfile: Dockerfile
    image: django:${TAG}
    container_name: task_app
    volumes:
      - ./django/mysite:/home/app
    environment:
      - THREADS=without
    expose:
      - 8000
    ports:
      - 8000:8000
    depends_on:
      task_db:
        condition: service_healthy
    command: /bin/bash -c "python manage.py makemigrations; python manage.py makemigrations tasks; python manage.py migrate; python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: curl --fail -s http://task-app:8000/ || exit 1
      interval: 20s
      timeout: 10s
      retries: 3
    networks:
      - my-network
    env_file: .env

  task_db:
    image: postgres:13.7-alpine
    container_name: task_db
    restart: always
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - tasks_postgres_volume:/var/lib/postgresql/data
      - ./postgres/postgres_config/set_schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U app -d tasks" ]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - my-network

volumes:
  tasks_postgres_volume:


networks:
    my-network: